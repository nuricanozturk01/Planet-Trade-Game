package nuricanozturk.dev;

import nuricanozturk.dev.entity.BlackHole;
import nuricanozturk.dev.factory.CommodityFactory;
import nuricanozturk.dev.factory.SpaceshipFactory;
import nuricanozturk.dev.generator.name.NameGeneratorFactory;
import nuricanozturk.dev.generator.name.NameType;
import project.gameengine.base.Action;
import project.gameengine.base.Game;
import project.gameengine.base.GameContext;
import project.gameengine.base.Player;


import java.util.List;

import static nuricanozturk.dev.util.Constants.MAX_PLAYER;
import static nuricanozturk.dev.util.Constants.MIN_PLAYER;

public class GameOfPlanet implements Game
{
    @Override
    public boolean isOver()
    {
        return false;
    }

    @Override
    public void init(List<Player> players)
    {
        //A blackhole explodes and a galaxy is created randomly +
        //A list of commodities with arbitrary names and properties generated.+
        //A list of spaceships is crated randomly by a spaceship factory +
        //Each player is placed at a random planet in the galaxy

        /*
            Each player is asked to choose and buy a spacehip from an initial list of spacehips which
            decreases the current money by the buy price of the chosen spaceship
         */

        /*
            At each planet a random market containing random supply of the commodities
             are generated by a market generator
         */

        var blackhole = new BlackHole(NameGeneratorFactory.create(NameType.BlackHole, 1));
        blackhole.explode();
        var galaxy = blackhole.explode();
        var commodities = CommodityFactory.createCommodities();
        var spaceships = SpaceshipFactory.createSpaceships();
        players.forEach(p -> p.prepareForGame(galaxy));

    }

    @Override
    public GameContext getContext()
    {
        return null;
    }

    @Override
    public void update(Action action)
    {

    }

    @Override
    public int minimumPlayerCount()
    {
        return MIN_PLAYER;
    }

    @Override
    public int maximumPlayerCount()
    {
        return MAX_PLAYER;
    }
}
